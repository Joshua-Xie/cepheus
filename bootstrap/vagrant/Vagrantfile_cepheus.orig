# -*- mode: ruby -*-
# vi: set ft=ruby :
#
# Copyright 2018, LambdaStack
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# CEPHEUS
# IMPORTANT: This Vagrantfile must be copied FROM Vagrantfile_cepheus

# This is a Vagrantfile to automatically provision a local ceph cluster.

# NOTE: At the time this project started, the Vagrant fedora plugin seemed to have a bug in it's networking
# where it overroad nic1 (nat) which caused ssh to fail. So, we had to create a way to update the consistent
# naming network interfaces with the proper IPs.

require 'openssl' # used to validate CA certificates
require 'uri' # used to parse the local mirror if one is given
require 'yaml'

Vagrant.require_version ">= 1.7.4"

if ENV['REPO_ROOT'].nil?
    $path = File.dirname(__FILE__) + ""
else
    $path = "#{ENV['REPO_ROOT']}/bootstrap/vagrant"
end
environment = YAML.load_file("#{$path}/environment_config.yaml")
servers = YAML.load_file("#{$path}/servers_config.yaml")

# Vagrant/VirtualBox on the last VM will sometimes fail to start after stoping so a place holder VM MUST be the
# last server entry in servers.yaml

# The storage_controller will need to be modified for different images because this gets defined when the image is created
# Ubuntu is "SATAController"

$lsb_name = environment['vagrant']['lsb_name']
$storage_controller = environment['vagrant']['storage_controller']
$domain = environment['vagrant']['domain']
$http_proxy_server = environment['vagrant']['http_proxy']
$https_proxy_server = environment['vagrant']['https_proxy']
$ssl_ca_file_path = environment['vagrant']['ssl_ca_file_path']
$ssl_ca_intermediate_file_path = environment['vagrant']['ssl_ca_intermediate_file_path']
unless $ssl_ca_file_path.nil? or $ssl_ca_file_path.empty?
  $ssl_ca_file = File.basename($ssl_ca_file_path)
end
unless $ssl_ca_intermediate_file_path.nil? or $ssl_ca_intermediate_file_path.empty?
  $ssl_ca_intermediate_file = File.basename($ssl_ca_intermediate_file_path)
end

# Some settings for each VM
$vm_os = environment['vagrant']['box']
$memory = ( environment['vagrant']['memory'] or "2560" )
$cpus = ( environment['vagrant']['cpus'] or "2" )
$vram = ( environment['vagrant']['vram'] or "16" )
$disk_size = ( environment['vagrant']['disk_size'] or "20480" )
$osd_drives = ( environment['vagrant']['drives'] or "4" )

# if proxies are provided, configure them before configuring any local mirror override
# RUN THIS SCRIPT WITH sudo AND privileged = false so that $HOME is set to the
# value of the non-root user
$proxy_configuration_script = <<-EOH
  touch $HOME/proxy_config.sh
EOH

$proxy_string = ""
# $bootstrap_node_name = ""

unless $http_proxy_server.nil? or $http_proxy_server.empty?
  if $lsb_name == 'centos' or $lsb_name == 'rhel'
    $bootstrap_node_name = servers.select { |k| k["roles"] == ["bootstrap"] }[0]["name"]
    $proxy_configuration_script << <<-EOH
      echo 'Defaults env_keep += "http_proxy https_proxy no_proxy SSL_CERT_FILE"' | sudo tee -a /etc/sudoers
      echo 'export http_proxy=#{$http_proxy_server}' | sudo tee -a /etc/profile
      echo 'export https_proxy=#{$https_proxy_server}' | sudo tee -a /etc/profile
      echo 'export no_proxy=127.0.0.1,#{$bootstrap_node_name}.#{$domain},10.0.100.*,10.121.*' | sudo tee -a /etc/profile
      echo 'proxy=#{$http_proxy_server};' | sudo tee -a /etc/yum.conf
      echo 'export http_proxy=#{$http_proxy_server}' | tee -a $HOME/proxy_config.sh
    EOH
  end
  $proxy_string = "export CEPH_CHEF_HTTP_PROXY=#{$http_proxy_server}\nexport CEPH_CHEF_HTTPS_PROXY=#{$https_proxy_server}\n"
end

# custom SSL CA cert support
unless $ssl_ca_file.nil? or $ssl_ca_file.empty?
  if $lsb_name == 'centos' or $lsb_name == 'rhel'
    $proxy_configuration_script << <<-EOH
      echo "export SSL_CERT_FILE='/etc/pki/ca-trust/source/anchors/cepheus_ca_bundle.crt'" | sudo tee -a /etc/profile
      sudo cp /tmp/#{$ssl_ca_file} /etc/pki/ca-trust/source/anchors/
      cat /tmp/#{$ssl_ca_file} | sudo tee /etc/pki/ca-trust/source/anchors/cepheus_ca_bundle.crt
    EOH

    unless $ssl_ssl_ca_intermediate_ediate_file.nil? or $ssl_ca_intermediate_file.empty?
      $proxy_configuration_script << <<-EOH
        sudo cp /tmp/#{$ssl_ca_intermediate_file} /etc/pki/ca-trust/source/anchors/
        cat /tmp/#{$ssl_ca_intermediate_file} | sudo tee -a /etc/pki/ca-trust/source/anchors/cepheus_ca_bundle.crt
      EOH
    end

    $proxy_configuration_script << <<-EOH
      sudo update-ca-trust
    EOH
  end
end

unless $https_proxy_server.nil? or $https_proxy_server.empty?
  if $lsb_name == 'centos' or $lsb_name == 'rhel'
    $proxy_configuration_script << <<-EOH
      echo 'export http_proxy=#{$http_proxy_server}' | sudo tee -a $HOME/proxy_config.sh
      echo 'export https_proxy=#{$https_proxy_server}' | tee -a $HOME/proxy_config.sh
      echo 'export no_proxy=127.0.0.1,#{$bootstrap_node_name}.#{$domain},10.0.100.*,10.121.*' | sudo tee -a $HOME/proxy_config.sh
    EOH
  end
end

# After other yum updates you may also need to re-install the kernel-devel-* so it's in the
# kernel-devel-`uname -r` - old way
# Only need this for Vagrant
if $lsb_name == 'centos' or $lsb_name == 'rhel'
  $repos_script = <<-EOH
    sudo sed -i 's/enforcing/disabled/g' /etc/selinux/config /etc/selinux/config
    sudo sed -i 's/permissive/disabled/g' /etc/selinux/config /etc/selinux/config
    sudo yum install -y kernel-devel gcc make perl bzip2
    sudo yum install -y epel-release rsync
  EOH
else
  $repos_script = <<-EOH
    sudo apt update
  EOH
end

at_exit do
  raise $! unless $!.success?
end

# NOTE: Now build *ALL* of the environment related files that drive the bash scripts and Chef...

# Last value in adapters_string array is net_mask
$adapters_string = "export CEPH_CHEF_ADAPTERS=( #{environment['vagrant']['front_end_adapter_ip']} #{environment['vagrant']['back_end_adapter_ip']} #{environment['vagrant']['net_mask'][0]} )"

# End of environment related file builds.

Vagrant.configure("2") do |config|
  config.vm.box = $vm_os

  servers.each_with_index do |server, i|
      config.vm.define server['name'] do |machine|

        $bootstrap_node = 0
        if server['name'].include? 'bootstrap'
            $bootstrap_node = i
        end

        # NOTE: May want to add two other exports to this file for external OSD drive mounts for VMs

        # Set fqdn of vm
        machine.vm.hostname = "#{server['name']}.#{$domain}"

        # Fun Ceph ascii art of a squid :)
        # If this gets in the way any tools you have created then move it to machine.vm.provider :virtualbox
        # Must use '#' to start each line so that ssh-config does not get confused.
        puts
        puts "#" * (machine.vm.hostname.length + 11)
        puts "# λ - " + machine.vm.hostname + " - λ"
        puts "#" * (machine.vm.hostname.length + 11)
        puts

        # copy custom certs to host
        unless $ssl_ca_file.nil? or $ssl_ca_file.empty?
          machine.vm.provision "file", source: "#{$path}/../../#{$ssl_ca_file_path}", destination: "/tmp/#{$ssl_ca_file}"
          unless $ssl_ca_intermediate_file.nil? or $ssl_ca_intermediate_file.empty?
            machine.vm.provision "file", source: "#{$path}/../../#{$ssl_ca_intermediate_file_path}", destination: "/tmp/#{$ssl_ca_intermediate_file}"
          end
        end

        # configure proxy servers (do not run as root)
        machine.vm.provision "configure-proxy-servers", type: "shell" do |s|
          s.privileged = false
          s.inline = $proxy_configuration_script
        end

        # Set up repositories
        # This is done here because we skip it in chef configuration PLUS there is an issue
        # where the package manager *may* update the kernel and when it does that the VBoxGuestAdditions
        # must be rebuilt to reflect the updated kernel. Also, this script will install guest addition
        # dependencies for rebuilding.
        machine.vm.provision "configure-repositories", type: "shell" do |s|
          s.inline = $repos_script
        end

        # The vbox_network.sh file contains network helper functions that are needed on each host to setup the
        # network interfaces correctly for consistent interface naming.
        machine.vm.provision "file", source: "vbox_network.sh", destination: "vbox_network.sh"
        # This file will be used to check and update the vbox guest addition
        machine.vm.provision "file", source: "vbox_check_guestaddons.sh", destination: "vbox_check_guestaddons.sh"

        # This creates an export file that gets sourced during the network interface update phase after the VMs have
        # been created. This is because as of this writing, the fedora plugin seemed to have a bug in the networking.
        machine.vm.provision "configure-network", type: "shell" do |s|
          s.privileged = false
          s.inline = "echo 'export CEPH_ADAPTER_IPS=(#{server['front_end_ip']} #{server['back_end_ip']} #{environment['vagrant']['net_mask'][1]} #{servers[$bootstrap_node]['front_end_ip']} #{servers[$bootstrap_node]['back_end_ip']})' > /home/vagrant/network_setup.sh"
        end

        machine.vm.provision "configure-network-dns", type: "shell" do |s|
          s.privileged = false
          s.inline = "echo 'export CEPH_CHEF_DNS=(#{environment['vagrant']['dns'][0]} #{environment['vagrant']['dns'][1]})' >> /home/vagrant/network_setup.sh"
        end

        machine.vm.provision "vbox-chg-permissions", type: "shell" do |s|
          s.privileged = true
          s.inline = "chmod +x vbox_check_guestaddons.sh"
        end

        machine.vm.provider :virtualbox do |vb|
          vb.name = "#{server['name']}"
          vm_name = vb.name

          vb.customize ["modifyvm", :id, "--memory", $memory]
          vb.customize ["modifyvm", :id, "--vram", $vram]
          vb.customize ["modifyvm", :id, "--cpus", $cpus]
          vb.customize ["modifyvm", :id, "--largepages", "on"]
          vb.customize ["modifyvm", :id, "--nestedpaging", "on"]
          vb.customize ["modifyvm", :id, "--vtxvpid", "on"]
          vb.customize ["modifyvm", :id, "--hwvirtex", "on"]
          vb.customize ["modifyvm", :id, "--ioapic", "on"]

          vb.vm.network "private_network", adapter: 2, name: "vboxnet0", adapter_ip: "#{environment['vagrant']['front_end_adapter_ip']}", ip: "#{server['front_end_ip']}", netmask: "#{server['front_end_netmask']}", type: "static"
          vb.vm.network "private_network", adapter: 3, name: "vboxnet1", adapter_ip: "#{environment['vagrant']['back_end_adapter_ip']}", ip: "#{server['back_end_ip']}", netmask: "#{server['back_end_netmask']}", type: "static"

        end # machine.vm.provider

        # Have to put this check in because of the way vagrant processes this Vagrantfile.
        if i == (servers.length - 1)
            File.open("#{$path}/ceph_chef_adapters.env", "w") { |file| file.write($adapters_string) }
        end

      end # config.vm.define
  end # servers list
end
