#!/bin/bash
#
# Copyright 2017, LambdaStack
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

##########
# NOTE: If you run this script and receive a VBoxManage related error then most likely the VM(s) have been removed or
# missing from where you store VirtualBox VMs BUT VBoxManage still thinks they are there. Simply pull up the
# VirtualBox UI application, stop and remove the 'ceph-*' VMs that should be shown and then start this script again.
##########

# Creates the REPO_ROOT env var for everything else to use...
export REPO_ROOT=$(git rev-parse --show-toplevel)

# Exit immediately if anything goes wrong, instead of making things worse.
set -eu

# Colors
# Black        0;30     Dark Gray     1;30
# Red          0;31     Light Red     1;31
# Green        0;32     Light Green   1;32
# Brown/Orange 0;33     Yellow        1;33
# Blue         0;34     Light Blue    1;34
# Purple       0;35     Light Purple  1;35
# Cyan         0;36     Light Cyan    1;36
# Light Gray   0;37     White         1;37
# RED='\033[0;31m'
# YELLOW='\033[0;33m'
# GREEN='\033[0;32m'
# NC='\033[0m' # No Color

DATE=`date`
PARENT="$(ps -o comm= $PPID)"
NAME=`basename "$0"`
echo "$NAME - called by - $PARENT on $DATE" >> $HOME/debug.txt


# Default values...
export CEPH_DEV_MODE=0
export CHEF_CEPHEUS_DEBUG=0
export BOOTSTRAP_GET_PREREQS_ONLY=0
export BOOTSTRAP_REMOVE_PREREQS=0
export BOOTSTRAP_HTTP_PROXY=
export BOOTSTRAP_HTTPS_PROXY=
export BOOTSTRAP_INIT=0
export BUILD_SHOW_LOGO=1
export BUILD_VMS_ONLY=0
export BUILD_ENVIRONMENT=vagrant
export BUILD_OS=centos
export BUILD_UPDATE=1
export BUILD_TEMPLATES_ONLY=0

# This is the default - MAKE SURE to pass in the two values that match what is found in the environment.yaml!!!!
# These two allow Cepheus to find the data you will be using for the given cluster. After this initial specification here
# it will use the 'location' and 'data_center' variables found in the 'environment.yaml' file.
export BUILD_LOCATION=public
export BUILD_DATA_CENTER=local

while getopts cbglrsxvu:n:e:d:p:o:t:z: opt; do
    case $opt in
        b)
            # (required first) MUST call this first. It will bootstrap Chef Server, client and support items.
            # NB: It will prompt you, as a reminder, and ask if your nodes all have the same ssh key of the primary_user!
            export BOOTSTRAP_INIT=1
            ;;
        c)
            # (optional) Allows you to see Chef output that only happens when Chef debug flags are set.
            # VERY verbose. The (-v below) option is meant for `bash` verbose and not Chef. You can combine both.
            CHEF_KNIFE_DEBUG="-VV"
            CHEF_CLIENT_DEBUG="-l debug"

            ;;
        d)
            # (optional) NB: Use this option if you want to change the default 'data center' from `local` to something
            # like `data_center_nyc`. It MUST represent a sub-folder in `private` or `public`!
            export BUILD_DATA_CENTER=$OPTARG

            # NB: ./CEPH_UP -d data_center_nyc
            ;;
        e)
            # (optional) NB: Use this option if you want to change the default environment from `vagrant` to something
            # like `production`. Can be used with -l option to change from `public` to `private`
            export BUILD_ENVIRONMENT=$OPTARG

            # NB: ./CEPH_UP -e production
            ;;
        g)
            # (optional) -g to simply get the prerequisites and exit. Use it with (-r below) and it will remove the
            # prerequisites and download them again.
            export BOOTSTRAP_GET_PREREQS_ONLY=1
            ;;
        l)
            # (optional) NB: Use this option if you want to change from the default `public` to `private` for 'location'.
            export BUILD_LOCATION=private
            ;;
        n)
            # (optional) NB: Use this option if you need to test/debug ceph-chef. It will skip downloading the current
            # version of ceph-chef so the local version will be used. The best way to do this is to copy over
            # your modified version of ceph-chef to the cookbook directory in this project before running
            # this script.

            # BOOTSTRAP_VAGRANT_DEBUG=1
            # CEPH_DEV_MODE == 1 then install ceph github source along with development tools. You can also install your favorite IDE if you want.
            # If nothing is passed in with -d option the CEPH_DEV_MODE is empty and debug ceph-chef is used.
            export CEPH_DEV_MODE=$OPTARG
            export CHEF_CEPHEUS_DEBUG=1

            # NB: Requires at least 1 argument '0' or '1'
            # Example: ./CEPH_UP -n 0
            ;;
        o)
            # (optional) NB: Use this option if you want to change from the default OS of `centos` to `rhel` or `ubuntu`
            export BUILD_OS=$OPTARG
            ;;
        p)
            # (optional) Only used if your environment requires a proxy to access the outside world.
            export BOOTSTRAP_HTTP_PROXY=$OPTARG
            export BOOTSTRAP_HTTPS_PROXY=$OPTARG
            ;;
        r)
            # (optional) -r to remove the prerequisites. Cleaning up.
            # It does not exit like -g but is called before gathering prerequisites.
            # Use it with -g -r and it will clean up and gather updated prerequisites and exit based on versions in build.yaml
            export BOOTSTRAP_REMOVE_PREREQS=1
            ;;
        s)
            # (optional) Used to skip building local Vagrant VMs build and jump right to building out Ceph. Used during
            # development to help save some time.
            BOOTSTRAP_SKIP_VMS=1
            ;;
        t)
            BOOTSTRAP_TYPE=$OPTARG
            ;;
        u)
            # Update the cluster.
            export BUILD_UPDATE=$OPTARG
            ;;
        v)
            # (optional) Builds the local Vagrant VMs only - skips building the Ceph portion. Used during development
            # to help save some time.
            export BUILD_VMS_ONLY=1
            ;;
        x)
            # (optional) Causes the logo portion *NOT* to show
            export BUILD_SHOW_LOGO=0
            ;;
        z)
            # Only run everything through the template_engine
            export BUILD_TEMPLATES_ONLY=1
            # If no argument then keep the existing one
            if [[ ! -z $OPTARG ]]; then
                export REPO_ROOT=$OPTARG
            fi
            ;;
    esac
done

$REPO_ROOT/data/templates/template_engine -d $REPO_ROOT/data/common.yaml -i $REPO_ROOT/data/templates/bootstrap/common/base_colors.sh.j2 -o $REPO_ROOT/bootstrap/common/base_colors.sh
source $REPO_ROOT/bootstrap/common/base_colors.sh

if [[ $BUILD_SHOW_LOGO -eq 1 ]]; then
    clear
    echo -e "${GREEN}"
    echo "                    __     "
    echo "                    \ \    "
    echo "                     > \   "
    echo "                    / ^ \  "
    echo "                   /_/ \_\ "
    echo
    echo "            Cepheus Vagrant Build"
    echo "-----------------------------------------------------"
    echo -e "Bootstrapping local CEPH environment using Vagrant...${NC}"
    echo
else
    echo
    echo_green "====> CEPH_UP being called..."
    echo
fi

# NB: Prompt as a reminder to make sure user knows that *ALL* nodes *MUST* have the same SSH KEY! There are many ways this can
# be done. If PXE_BOOT option is used then this is not needed because it will distribute the key to all nodes.
if [[ $BOOTSTRAP_INIT -eq 1 || $BUILD_VMS_ONLY -eq 1 ]]; then
    $REPO_ROOT/data/templates/template_engine -d $REPO_ROOT/data/common.yaml -i $REPO_ROOT/data/templates/bootstrap/common/bootstrap_key_prompt.sh.j2 -o $REPO_ROOT/bootstrap/common/bootstrap_key_prompt.sh
    source $REPO_ROOT/bootstrap/common/bootstrap_key_prompt.sh
fi

# Create *initial* build.yaml from common.yaml
cp $REPO_ROOT/data/common.yaml $REPO_ROOT/data/$BUILD_LOCATION/$BUILD_DATA_CENTER/build.yaml

# Build bootstrapping environment based on yaml data
BUILD=data/build.sh

echo_yellow "====> Generating $REPO_ROOT/$BUILD from $REPO_ROOT/data/common.yaml..."
$REPO_ROOT/data/templates/template_engine -d $REPO_ROOT/data/common.yaml -i $REPO_ROOT/data/templates/$BUILD.j2 -o $REPO_ROOT/$BUILD
sudo chmod +x $REPO_ROOT/$BUILD

# Add all other data files to the final build.yaml
BUILD_DATA=data/data_files.sh
echo_yellow "====> Generating $REPO_ROOT/$BUILD_DATA from $REPO_ROOT/data/$BUILD_LOCATION/$BUILD_DATA_CENTER/data/environment.yaml..."
$REPO_ROOT/data/templates/template_engine -d $REPO_ROOT/data/$BUILD_LOCATION/$BUILD_DATA_CENTER/data/environment.yaml -i $REPO_ROOT/data/templates/$BUILD_DATA.j2 -o $REPO_ROOT/$BUILD_DATA
sudo chmod +x $REPO_ROOT/$BUILD_DATA


## Execution phase of scripts - after being built above!
# Data portion is executed first to create the required data files.
# Execute the freshly built `data_files.sh` script that was just built from the template.
#
echo_yellow "====> Executing $REPO_ROOT/$BUILD_DATA..."
source $REPO_ROOT/$BUILD_DATA
#
# Execute the freshly built `build.sh` script that was just built from the template.
echo_yellow "====> Executing $REPO_ROOT/$BUILD..."
source $REPO_ROOT/$BUILD
#
## Execution phase end block


# Build the init and update scripts
BUILD_INIT_UPDATE=data/build_init_update.sh
echo_yellow "====> Generating $REPO_ROOT/$BUILD_INIT_UPDATE from $REPO_ROOT/data/$BUILD_LOCATION/$BUILD_DATA_CENTER/build.yaml..."
$REPO_ROOT/data/templates/template_engine -d $REPO_ROOT/data/$BUILD_LOCATION/$BUILD_DATA_CENTER/build.yaml -i $REPO_ROOT/data/templates/$BUILD_INIT_UPDATE.j2 -o $REPO_ROOT/$BUILD_INIT_UPDATE
sudo chmod +x $REPO_ROOT/$BUILD_INIT_UPDATE

echo_yellow "====> Executing $REPO_ROOT/$BUILD_INIT_UPDATE..."
source $REPO_ROOT/$BUILD_INIT_UPDATE

# Build environments file for Chef
echo_yellow "====> Generating $REPO_ROOT/environments/$BUILD_ENVIRONMENT.json..."
$REPO_ROOT/data/templates/template_engine -d $REPO_ROOT/data/$BUILD_LOCATION/$BUILD_DATA_CENTER/build.yaml -i $REPO_ROOT/data/templates/base_environment.json.j2 -o $REPO_ROOT/environments/$BUILD_ENVIRONMENT.json

if [[ $BUILD_TEMPLATES_ONLY -ne 0 ]]; then
    echo
    echo_green "====> Built templates only - Complete <===="
    echo
    exit 0
fi

# Configure and test any proxies configured.
if [[ ! -z $BOOTSTRAP_HTTP_PROXY ]] || [[ ! -z $BOOTSTRAP_HTTPS_PROXY ]] ; then
  echo_yellow "====> Testing configured proxies..."
  source $REPO_ROOT/bootstrap/common/bootstrap_proxy_setup.sh
fi

# Do prerequisite work prior to starting build, downloading files and
# creating local directories. It can do one of two things - download or execute commands. The end result is a filled cache.
echo_yellow "====> Downloading necessary files to local cache..."
# The /ceph-files parameter will need to be addressed!
source $REPO_ROOT/bootstrap/common/bootstrap_prereqs.sh /ceph-files `pwd`

# If prerequisites only then end after getting them
if [[ $BOOTSTRAP_GET_PREREQS_ONLY -ne 0 ]]; then
    echo
    echo_green "====> Prerequisites have been updated - Complete <===="
    echo
    exit 1
fi

# Save the REPO_ROOT value...
TMP_REPO_ROOT=$REPO_ROOT

if [[ $BOOTSTRAP_INIT -eq 0 ]]; then
    if [[ $BUILD_ENVIRONMENT == "vagrant" && $BUILD_UPDATE -ne 0 ]]; then
        cd $REPO_ROOT/bootstrap/vms/vagrant
        ./CEPH_UP_VAGRANT
        exit 0
    fi
else
    # Build out or update the given environment.
    echo_yellow "====> Calling bootstrap_init.sh..."
    sudo $REPO_ROOT/bootstrap/common/bootstrap_init.sh $REPO_ROOT $BUILD_LOCATION $BUILD_DATA_CENTER

    echo_yellow "====> Calling bootstrap_chef_server.sh..."
    # Just a safe check because this part can fail and be fine.
    set +e
    source $REPO_ROOT/bootstrap/common/bootstrap_chef_server.sh $REPO_ROOT
    set -e

    echo_yellow "====> Calling bootstrap_chef_nodes.sh..."
    source $REPO_ROOT/bootstrap/common/bootstrap_chef_nodes.sh $REPO_ROOT

    echo_green "====> Bootstrapping phase - Complete <===="
    echo
    exit 0
fi

echo_yellow "====> Calling cepheus_update.sh..."
source $TMP_REPO_ROOT/bootstrap/common/cepheus_update.sh

echo
echo_green "====> CEPH_UP - Completed! <===="
echo
