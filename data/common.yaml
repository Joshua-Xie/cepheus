---
# Data file for building the bootstrapping of Cepheus.
# Templates that use this data file:
#   **See `files` section below**

# NB: This file contains NO OS specific items but instead points to where it's located with the 'envrionment' section
# below. Portions that are common across all OS and public/private versions will be found here.

# IMPORTANT: Whatever data is here will be appended to the overall `build.yaml` that will be located `public` or
# `private` based on the value passed to the intial ./CEPH_UP script

# IMPORTANT: No section below can exist in other yaml files be used in the files being appended. For example,
# 'environment' section can not already exist in other yaml files. The except are OS specific yaml files.

# 'method' can only be `repo` or `pxe`. If `pxe` then the 'pxe_boot' section of the given OS yaml is used.
method: repo

version: 1.1.2

organization:
    name: LambdaStack
    url: http://lambdastack.io

build:
    # Where the clone of https://github.com/cepheus-io/cepheus-build is located
    cepheus: cepheus-build
    # Working directory where layering occurs.
    work_dir: /tmp/cepheus
    ceph:
        # 'bootstrap_init.sh' will create the gate file and 'bootstrap_ceph.sh' will remove it if bootstrapping succeeded!
        # DO NOT remove the gate file!
        bootstrap_gate_file: CEPHEUS_CEPH_BOOTSTRAPPING
        bootstrap_gate_message: ">>>> IMPORANT - DO NOT delete this file manually! Cepheus will do it once it's done <<<<"

# NB: Chef client/server data that is OS specific is found in 'rhel.yaml', 'centos.yaml' and 'ubuntu.yaml'
# NB: Basic Chef info is found in the envrionment.yaml file.

# Base Chef Cookbook for all of Ceph
# Change the '-' to '_' of the cookbook name (ceph-chef)
# Part of 'prereqs' script...
ceph_chef: # (required file - cookbook - for build)
    version: 1.1.15
    # If debug is false then use the supermarket version of ceph-chef else use github version
    # NB: For the initial build out *make* sure debug is 'false'
    debug: false
    git:
        github: true
        url: https://github.com/
        repo: cepheus-io/ceph-chef
        branch: master

    # These gems are required for the `ceph-chef`
    gems: # (required files for build)
        -   name: netaddr
            version: 1.5.1
        -   name: chef-sugar
            version: 3.4.0

# If `inline` is true then substitute the name and verison inline else use url as specified
# NB: If there is a python dependency then use the example below and create one or more using the syntax below.
# It will automatically download if present.
# python: # (required files for build and runtime)
    # -   name: PyYAML
    #     version: 3.12
    #     inline: true
    #     url: http://pyyaml.org/download/pyyaml/

# Cache directories in the format of base/{cookbook,gem...}
cache:
    repo: /ceph-host
    base: /ceph-files
    # NB: If `download` is true then call bootstrap_prereqs.sh else `commands`
    download: true
    # NB: If `download` is false then execute whatever is in `commands`. You can load directly into cache.base and set `commands` to ""
    commands: |
        echo "test1"
        echo "test2"
        echo "test3"
    cookbook: cookbooks
    gem: gems
    packages: packages
    python: python
    pxe_boot: pxe_boot
    iso: isos
    loader: loaders

cookbooks: # (required files for build)
    - name: poise
      version: 2.7.2
    - name: chef-client
      version: 8.0.1
    - name: windows
      version: 3.0.5
    - name: ohai
      version: 5.0.4
    - name: cron
      version: 4.1.1
    - name: logrotate
      version: 2.1.0
    - name: compat_resource
      version: 12.19.0
    - name: ntp
      version: 3.3.1
    - name: yum
      version: 5.0.1
    - name: yum-epel
      version: 2.1.1
    - name: apt
      version: 6.1.0
    - name: apache2
      version: 3.3.0
    - name: chef_handler
      version: 2.1.1
    - name: firewall
      version: 2.6.1
    - name: chef-sugar
      version: 3.4.0
    - name: sudo
      version: 3.4.0
    - name: collectd
      version: 2.2.4
    - name: collectd_plugins
      version: 2.1.3
    - name: poise-service
      version: 1.4.2
    - name: yumgroup
      version: 0.5.0

# These gems come from a different source and have a different url format that the ceph-chef gems
gems: # (required files for build)
    - arr-pm-0.0.10
    - backports-3.6.4
    - cabin-0.7.1
    - childprocess-0.5.6
    - clamp-0.6.5
    - ffi-1.9.8
    - fpm-1.3.3
    - json-1.8.2

# These are required for the build environment to function correctly.
shell:
    - curl
    - rsync
    - ssh
    - git

# List of build environment files.
# When building files from templates add them here and it will happen automatically when running ./CEPH_UP
# Leave off the initial '/'. Scripts will add that if needed.
# These files should also be in the .gitignore file so that the final version will not be stored.
# Leave out `build.sh` from this list.
# Put these in the order you need them to be called in.
# NB: All of these files automatically have chmod +x added so if you need a different set of rights then do that in your script.
files:
    -   "bootstrap/common/base_environment.sh"
    -   "bootstrap/common/base.sh"
    -   "bootstrap/common/base_colors.sh"
    -   "bootstrap/common/bootstrap_validate_env.sh"
    -   "bootstrap/common/bootstrap_prereqs.sh"
    -   "bootstrap/common/bootstrap_key_prompt.sh"
    -   "bootstrap/common/bootstrap_ceph.sh"
    -   "bootstrap/common/chef_runlists_update.sh"
    -   "bootstrap/common/chef_tags_create.sh"
    -   "bootstrap/common/chef_tags_delete.sh"
    -   "bootstrap/common/chef_environment_nodes.sh"
    -   "bootstrap/common/ceph_check_rgw_logs.sh"
    -   "bootstrap/common/ceph_osd_pgs_per_node.sh"
    -   "bootstrap/common/ceph_osd_tree_node.sh"
    -   "bootstrap/common/util_ntp_sync.sh"

# These files represent the build init and update files.
build_init_update_files:
    -   "bootstrap/common/bootstrap_chef_server.sh"
    -   "bootstrap/common/bootstrap_chef_nodes.sh"
    -   "bootstrap/common/bootstrap_init.sh"
    -   "bootstrap/common/cepheus_update.sh"
    -   "bootstrap/common/cepheus_backup_rsync.sh"
    -   "bootstrap/common/cepheus_backup_no_rsync.sh"
    -   "bootstrap/common/hosts_ansible"
    -   "bootstrap/common/hosts"

# These files will get called in the order found here (important). This is reserved *only* for the initial Ceph bootstrapping
# for the cluster. Don't use it for anything else. There are gates in certain files so if something is not enabled it will
# automatically skip it but keep the order there.
ceph_bootstrap_process_files:
    -   "bootstrap/common/ceph_mon.sh"
    -   "bootstrap/common/ceph_crushmap.sh"
    -   "bootstrap/common/ceph_osd.sh"
    -   "bootstrap/common/ceph_osd_tunables.sh"
    -   "bootstrap/common/ceph_osd_pools.sh"
    -   "bootstrap/common/ceph_rgw.sh"
    -   "bootstrap/common/ceph_rgw_users.sh"
    -   "bootstrap/common/ceph_api_rest.sh"
    -   "bootstrap/common/ceph_finish.sh"
    -   "bootstrap/common/ceph_adc.sh"
    -   "bootstrap/common/ceph_mgr.sh"

# These files represent the build update files that are generated by cepheus_update.sh once it's created from the template above
# This allows for new hosts or deleting hosts while the 'hosts' in 'build_init_update_files' if for the initial bootstrapping
build_update_files:
    -   input: "$REPO_ROOT/data/templates/bootstrap/common/hosts.j2"
        output: "/etc/hosts"
        echo: "====> Updating /etc/hosts..."
        sudo: true

# Other yaml files are appended here during the build process to make a new `build.yaml` file.


# NB: Colors section is long and injected where needed instead of sourcing a file for the data.
colors: |
    # Colors
    # Black        0;30     Dark Gray     1;30
    # Red          0;31     Light Red     1;31
    # Green        0;32     Light Green   1;32
    # Brown/Orange 0;33     Yellow        1;33
    # Blue         0;34     Light Blue    1;34
    # Purple       0;35     Light Purple  1;35
    # Cyan         0;36     Light Cyan    1;36
    # Light Gray   0;37     White         1;37

    # NB: Color constants
    BLACK='\033[0;30m'
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    ORANGE='\033[0;33m'
    BLUE='\033[0;34m'
    PURPLE='\033[0;35m'
    CYAN='\033[0;36m'
    LIGHT_GRAY='\033[0;37m'
    DARK_GRAY='\033[1;30m'
    LIGHT_RED='\033[1;31m'
    LIGHT_GREEN='\033[1;32m'
    YELLOW='\033[1;33m'
    LIGHT_BLUE='\033[1;34m'
    LIGHT_PURPLE='\033[1;35m'
    LIGHT_CYAN='\033[1;36m'
    WHITE='\033[1;37m'

    # NB: Make sure to change color back to ${NC} so that user's terminal stays with the last color used.
    NC='\033[0m' # No Color

    # NB: Functions that echo out color...

    function echo_print {
        color=$1
        text=$2
        echo -e "${color}$text${NC}"
    }

    function echo_black {
        echo_print $BLACK "$1"
    }

    function echo_red {
        echo_print $RED "$1"
    }

    function echo_green {
        echo_print $GREEN "$1"
    }

    function echo_orange {
        echo_print $ORANGE "$1"
    }

    function echo_blue {
        echo_print $BLUE "$1"
    }

    function echo_purple {
        echo_print $PURPLE "$1"
    }

    function echo_cyan {
        echo_print $CYAN "$1"
    }

    function echo_light_gray {
        echo_print $LIGHT_GRAY "$1"
    }

    function echo_dark_gray {
        echo_print $DARK_GRAY "$1"
    }

    function echo_light_red {
        echo_print $LIGHT_RED "$1"
    }

    function echo_light_green {
        echo_print $LIGHT_GREEN "$1"
    }

    function echo_yellow {
        echo_print $YELLOW "$1"
    }

    function echo_light_blue {
        echo_print $LIGHT_BLUE "$1"
    }

    function echo_light_purple {
        echo_print $LIGHT_PURPLE "$1"
    }

    function echo_light_cyan {
        echo_print $LIGHT_CYAN "$1"
    }

    function echo_white {
        echo_print $WHITE "$1"
    }

# NB: You can add more common data here or above the 'colors' section above.
