---
# Environment data file

# IMPORTANT: Whatever data is here will be appended to the overall `build.yaml` that will be located `public` or
# `private` based on the value passed to the intial ./CEPH_UP script

# Things specific to the environment of which you're building. The default is 'vagrant' for a 'local' build.

environment: vagrant

# Domain will be your actual domain in your production cluster
domain: example.com

# Default data center name is `local`
data_center: &data_center local

# Can only be `public` or `private`.
location: public

# NICs - Each hardware vendor *may* have different device names. Define them here for the given environment
# Supermicro
## Non-Storage nodes - Assumes 2 devices (could be any size 10Gb, 20Gb, 40Gb) in this scenario
# Non-Storage nodes (clients) do not need a second NIC/Port since only the "public" interface is used
# If you have two then you can bond them if desired
# device1_1U: &device1_1U enp4s0f0
# device2_1U: &device2_1U enp4s0f1d1
## Storage nodes - Assumes 2 devices (could be any size 10Gb, 20Gb, 40Gb) in this scenario
# device1_2U: &device1_2U enp130s0f0
# device2_2U: &device2_2U enp130s0f1d1

## Make sure to check the NIC device names of your hardware and update them here.

## NB: Important - The following device variables are defined here in the environment.yaml file ONLY.
## Other data files can reference `*device1_1U` etc since the final file 'build.yaml' will have these defined in it.
#
# Vagrant
device1_1U: &device1_1U enp0s8
device2_1U: &device2_1U enp0s9
device1_2U: &device1_2U enp0s8
device2_2U: &device2_2U enp0s9
#
## End of device variable naming

# These can be any data files you want. A normal example is putting your rack data into a separate yaml for each rack
# and then add them here to be included in the final build of `build.yaml` which everything will eventually derive from.
data_files:
    - "ceph.yaml"
    - "adc.yaml"
    - "centos.yaml"
    - "pxe_boot.yaml"
    - "inventory.yaml"

# Environment specific files that need to run through the template engine
environment_files:
    - "bootstrap/vms/environment_config_yaml"

# Root/sudo related items
root:
    # Used in bootstrap kickstart file only for now which is used only for PXE booting
    pwd: $6$Salt$3xxLPT099nzTbWkOS3CPNcar/zSLQ8BEgZdJk/AOkOb4V80sPepbraWcvrJvEEu6PswpKUw1WodWeiqRo1bw2/

# The users listed here will be created on all nodes in the cluster if they do not already exist
# To create encrypted pwd: python -c 'import crypt; print(crypt.crypt("password", "$6$Salt"))'
users:
    - name: operations
      group: wheel
      comment: "Operations user"
      passwd: $6$Salt$3xxLPT099nzTbWkOS3CPNcar/zSLQ8BEgZdJk/AOkOb4V80sPepbraWcvrJvEEu6PswpKUw1WodWeiqRo1bw2/
      passwd_type: "--iscrypted"
      key: "ceph_bootstrap.pub"
      private_key: operations
      sudo: true
      # For Jewel and later the `ceph_group` tells the recipes to add this user to the 'ceph' group so 'sudo' is not
      # required for ceph commands
      ceph_group: true
    - name: vagrant
      group: wheel
      comment: "Vagrant user"
      passwd: $6$Salt$6AyUczFy6SgV8A2wKAKfA9drpzrUsTGPJ3QjcWBbgS97BxBO.C7ZcBFALRiRkKfi9x8MK2SHet38BCQWS9LsR/
      passwd_type: "--iscrypted"
      key: "ceph_bootstrap.pub"
      private_key: operations
      sudo: true
      # For Jewel and later the `ceph_group` tells the recipes to add this user to the 'ceph' group so 'sudo' is not
      # required for ceph commands
      ceph_group: true

# This user will be the primary user of the given envrionment which will be `operations` in production and `vagrant` for local
# This is can be a mirror of one of the users above. It must be present.
primary_user:
    name: vagrant
    group: wheel
    comment: "Vagrant user"
    passwd: $6$Salt$6AyUczFy6SgV8A2wKAKfA9drpzrUsTGPJ3QjcWBbgS97BxBO.C7ZcBFALRiRkKfi9x8MK2SHet38BCQWS9LsR/
    passwd_type: "--iscrypted"
    key: "ceph_bootstrap.pub"
    private_key: operations
    sudo: true
    # For Jewel and later the `ceph_group` tells the recipes to add this user to the 'ceph' group so 'sudo' is not
    # required for ceph commands
    ceph_group: true

# Data specific for the given bootstrap node. This is environment specific data.
bootstrap:
    # Bootstrap IP address
    ip: 10.0.100.20
    # Host name
    name: ceph-bootstrap
    # Used by scripts in the cookboks. The user MUST be correct. The default user is `operations`
    env: /home/operations/cepheus/environments
    # ks - Kickstart file in RHEL/CentOS
    ks: cepheus_bootstrap_rhel.ks
    # Roles are important. Roles define what gets installed and what purpose the node plays in your cluster.
    # You can combine any number of roles the node is suppose to have as long as a given role does not conflict with another.
    roles:
        - bootstrap
    interfaces:
      - device: *device1_1U
        ip: 10.0.100.20
        mtu: 1500
        netmask: 255.255.255.0
        gateway:
        mac:
      - device: *device2_1U
        ip: 10.121.2.2
        mtu: 1500
        netmask: 255.255.255.0
        gateway:
        mac:

# Hardware vendor specific
ipmi:
  user:
  passwd:

chef:
  owner: vagrant
  group: vagrant
  server: http://10.0.100.20:4000

monitoring:
  collectd:
    id: graphite
    ip: 127.0.0.1
    port: 2013
    prefix: "collectd."
  zabbix:
    server: 10.0.100.6
    ceph:
      blocked_op: 0
      slow_osd: 0

cron:
  # Log processing to push logs into Cepheus
  logs:
    enable: false
    ceph:
      radosgw:
        uid: cepheus_log_admin
        name: "Cepheus Log Admin"
        access_key: "whatever_your_access_key"
        secret_key: "whatever_your_secret_key"
        endpoint: "whatever_your_endpoint"
        port: 80
        bucket: cepheus_logs
    patterns:
      - directory: "/var/log/ceph"
        pattern: "*.log-*.gz"
      - directory: "/var/log/radosgw"
        pattern: "ceph.client.radosgw.*.log-*.gz"
      # Broken out here to show that you can if you wanted to push the data to a different bucket
      - directory: "/var/log/radosgw"
        pattern: "civetweb.access.*.log-*.gz"
        # Bucket here is to show that down the road we can add this feature maybe if we want to put the access logs in a different bucket
        #bucket: cepheus_logs_access

# Supermicro node NICs look like:
#   NOTE: 1U nodes have the following interface names:
#   enp4s0f0 - public and enp4s0f1d1 - cluster
#   NOTE: 2U nodes have the following interface names:
#   enp130s0f0 - public and enp130s0f1d1 - cluster
#   2U Interfaces
network:
  public:
    interface: *device1_2U
    cidr:
        # If each rack was on a different subnet then list them for each rack
        - 10.0.100.0/24
    netmask: 255.255.255.0
    # Change the MTU on production systems to 9000
    mtu: 1500
  cluster:
    interface: *device2_2U
    gateway_enable: true # false for production
    cidr:
        - 110.121.2.0/24
    route:
        cidr: 10.121.2.0/24
    netmask: 255.255.255.0
    # Change the MTU on production systems to 9000
    mtu: 1500

# Example of bond if needed. Must enable it.
# REMOVE LATER - Moved to Inventory.yaml
bond:
  name: bond0
  enable: false
  mtu: 1500
  options: "mode=4 miimon=100 xmit_hash_policy=layer3+4"
  interfaces:
    - *device1_1U
    - *device1_2U

# Put your DNS servers here
nameservers:
  - 8.8.8.8
  - 8.8.4.4

# Put your NTP servers here (host name or IP)
ntp:
    - 0.pool.ntp.org
    - 1.pool.ntp.org
    - 2.pool.ntp.org
    - 3.pool.ntp.org
