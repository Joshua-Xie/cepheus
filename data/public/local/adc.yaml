---

# ADC - Application Delivery Controller (aka Load Balancers)
# Below are HAProxy software load balancers but you can set `enable` to false and use a hardware load balancer
# Hardware LB examples:
# F5 - https://f5.com/products/deployment-methods/hardware - Vipiron 2200
# Citrix - Netscaler
# Make sure you do a LOT of due diligence on the hardware load balancers. They are expensive and often times not as
# performant as a good 1U with large capacity NICs running HAProxy.

adc:
    enable: false
    interface: *device1_1U
    haproxy:
        enable: false
        port: 1936
        user: haproxy
        passwd: haproxy
        balance: roundrobin
        max_connections: 6000
    # Keepalived nodes should have at least two but maybe one per rack
    keepalived:
        enable: false
        passwd: keepalived
        servers:
            - name: ceph-vm3
              weight: 5
              interface: *device1_1U
              priority: 90
            - name: ceph-vm2
              weight: 5
              interface: *device1_1U
              priority: 100
            - name: ceph-vm1
              weight: 5
              interface: *device1_1U
              priority: 110
    # BGP uses the keepalived servers - Make sure the peer names DO NOT have spaces.
    bgp:
        enable: false
        asn: 65032
        interface: *device1_1U
        roles:
            - name: ceph-vm1
              role: primary
            - name: ceph-vm2
              role: secondary
        peers:
            - name: Spine1
              label: bgp_peer1
              ip: 10.121.16.8
            - name: Spine2
              label: bgp_peer2
              ip: 10.121.16.9
    vip:
        prefix: 10.121.0.16
        netmask: 255.255.255.240
        cidr: 28
        vips:
            # backend_port represents the port of the backend instance which overrides the default backend/server/port below. ONLY applies to Federated.
            # IMPORTANT: NON RGW VIPS MUST be first for template to work without re-working it!
            # WWW is the Web UI for the cluster
            - name: www
              ip: 10.121.16.17
              interface: *device1_1U
              type: web
              backend_label: web-ui-backend
              ssl: false
              # NOTE: Change this wildcard cert later
              cert: wildcard.s3.www.example.com.pem
              # Since using a wildcard the ssl_files can be just one file. However, the recipe will build from the ssl_files if more are present
              ssl_files:
                  - wildcard.s3.www.example.com.pem
              url: www.example.com
              backend_port: 8088
              region: *data_center
            # API is the RESTful api for the cluster
            - name: api
              ip: 10.121.16.18
              interface: *device1_1U
              type: api
              backend_label: restful-api-backend
              ssl: false
              # NOTE: Change this wildcard cert later
              cert: wildcard.s3.api.example.com.pem
              # Since using a wildcard the ssl_files can be just one file. However, the recipe will build from the ssl_files if more are present
              ssl_files:
                  - wildcard.s3.api.example.com.pem
              url: api.example.com
              backend_port: 8089
              region: *data_center
            - name: dev
              ip: 10.121.16.19
              interface: *device1_1U
              type: rgw
              backend_label: radosgw-http-backend
              ssl: false
              cert: wildcard.s3.vagrant.dev.example.com.pem
              # Since using a wildcard the ssl_files can be just one file. However, the recipe will build from the ssl_files if more are present
              ssl_files:
                  - wildcard.s3.vagrant.dev.example.com.pem
              url: s3.vagrant.dev.example.com
              backend_port: 8080
              # NOTE: region and zone are here as well as in the ceph-federated section for easier ceph.conf rgw manipulation. The other is used for something else but the data is the same.
              region: *data_center
              rgw_thread_pool: 100
              handles: 5
              threads: 100
            - name: prod
              ip: 10.121.16.20
              interface: *device1_1U
              type: rgw
              backend_label: radosgw-http-backend
              ssl: false
              cert: wildcard.s3.vagrant.prod.example.com.pem
              # Since using a wildcard the ssl_files can be just one file. However, the recipe will build from the ssl_files if more are present
              ssl_files:
                  - wildcard.s3.vagrant.prod.example.com.pem
              url: s3.vagrant.prod.example.com
              backend_port: 8081
              region: *data_center
              rgw_thread_pool: 100
              handles: 5
              threads: 100
    backend:
        # port - value below is the default port value for the backend. The VIPs backend_port will override this variable in the template for Federated (ONLY).
        # type - has a special meaning for rgw and federated use
        servers:
            - name: ceph-vm1
              type: rgw
              weight: 6
              port: 8080
              options: "check inter 2s rise 2 fall 3"
            - name: ceph-vm2
              type: rgw
              weight: 6
              port: 8080
              options: "check inter 2s rise 2 fall 3"
            - name: ceph-vm3
              type: rgw
              weight: 6
              port: 8080
              options: "check inter 2s rise 2 fall 3"
