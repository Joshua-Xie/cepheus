#!/bin/bash
#
# Copyright 2017, LambdaStack
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

##########
# NOTE: If you run this script and receive a VBoxManage related error then most likely the VM(s) have been removed or
# missing from where you store VirtualBox VMs BUT VBoxManage still thinks they are there. Simply pull up the
# VirtualBox UI application, stop and remove the 'ceph-*' VMs that should be shown and then start this script again.
##########

# Exit immediately if anything goes wrong, instead of making things worse.
set -eu

source $REPO_ROOT/bootstrap/common/base_environment.sh
source $REPO_ROOT/bootstrap/common/base_colors.sh

# IMPORTANT!!!!!
# Copy over the Vagrantfile_cepheus to Vagrantfile
# There are two Vagrantfile* files. One for building the build environment (Vagrant_build_env) and one for
# building the CEPHEUS cluster (Vagrantfile_cepheus) for testing.
cp $REPO_ROOT/bootstrap/vagrant/Vagrantfile_cepheus $REPO_ROOT/bootstrap/vagrant/Vagrantfile

export CHEF_KNIFE_DEBUG=${CHEF_KNIFE_DEBUG:-""}
export CHEF_CLIENT_DEBUG=${CHEF_CLIENT_DEBUG:-""}

export BOOTSTRAP_HTTP_PROXY=${BOOTSTRAP_HTTP_PROXY:-}
export BOOTSTRAP_HTTPS_PROXY=${BOOTSTRAP_HTTPS_PROXY:-}

# Override for other environments like production, staging etc.
export BOOTSTRAP_CHEF_ENV=${BOOTSTRAP_CHEF_ENV:-"vagrant"}
# Other types are 'bare_metal, vbox'
export BOOTSTRAP_TYPE=${BOOTSTRAP_TYPE:-"vagrant"}
# IMPORTANT: *MUST* match environment with 'chef owner' NOTE: This is also the Chef user
export CHEF_CEPHEUS_OWNER=${CHEF_CEPHEUS_OWNER:-"vagrant"}
export CHEF_CEPHEUS_GROUP=${CHEF_CEPHEUS_GROUP:-"vagrant"}
# Bootstrap specific variables
export BOOTSTRAP_SKIP_VMS=${BOOTSTRAP_SKIP_VMS:-0}
# Vagrant debug flag
export BOOTSTRAP_VAGRANT_DEBUG=${BOOTSTRAP_VAGRANT_DEBUG:-0}

# Force the banner to show
export DONT_SHOW_BANNER=0

# Perform preflight checks to validate environment sanity as much as possible.
echo_yellow "====> Performing preflight environment validation..."
source $REPO_ROOT/bootstrap/common/bootstrap_validate_env.sh

if [[ $BOOTSTRAP_TYPE == "vagrant" ]]; then
  # Test that Vagrant is really installed and of an appropriate version.
  if [[ $BOOTSTRAP_SKIP_VMS -ne 1 ]]; then
    echo_yellow "====> Checking VirtualBox and Vagrant..."
    source $REPO_ROOT/bootstrap/vagrant/vagrant_test.sh
  fi
fi

# Create VMs in Vagrant and start them.
# VM only tests inside vagrant_create script
echo_yellow "====> Clean up old VMs and Starting new local Vagrant cluster..."
$REPO_ROOT/bootstrap/vagrant/vagrant_create.sh

# IMPORTANT: Inside vagrant_create.sh in the configure_network function the ADDING of OSD drives
# occurs! This is important because it needes to be done while the VMs are off. Since adding network
# adpaters also require the VM being off, putting them together saved time.

if [[ $BUILD_VMS_ONLY -eq 0 ]]; then
    # Reset shared folders and virtualbox guest addons since addons are required for shared folders.
    # This is placed here for automatic build in Vagrant option.
    # $REPO_ROOT/bootstrap/vagrant/vagrant_create_shared_folders_in_vms.sh

    # Install and configure Chef on all Vagrant hosts.
    echo_yellow "====> Installing and configuring Chef on all nodes using the all in one script."
    $REPO_ROOT/bootstrap/vagrant/vagrant_configure_chef_aio.sh
else
    echo
    echo_green "====> Cepheus VMs have been created - Complete <===="
    echo
fi

# Just making sure in vagrant directory
cd $REPO_ROOT/bootstrap/vagrant
# Create ssh config file from vagrant info
vagrant ssh-config > vagrant.ssh.config

echo_yellow "====> Installing git on {{ bootstrap.name }}..."

# Part of 'cepheus-build' step 1 prerequisites.
{% if os.type != "ubuntu" %}
vagrant ssh {{ bootstrap.name }} -c "sudo yum install -y git"
{% else %}
vagrant ssh {{ bootstrap.name }} -c "sudo apt install -y git"
{%- endif %}

echo_yellow "====> Setting up public key..."
if [[ -f tmp_authorized_keys ]]; then
    rm -f tmp_authorized_keys
fi

# Part of 'cepheus-build' step 0 prerequisites.
# Make sure each node has the public key and certain ones contain the private key.
{%- if primary_user.key.public.startswith('ssh-rsa') %}
echo "{{ primary_user.key.public }}" > tmp_authorized_keys
{% else %}
cp {{ primary_user.key.path }}/{{ primary_user.key.public }} tmp_authorized_keys
{%- endif %}

# Copy the pub key to each node.
{% for node in inventory.nodes %}
echo_yellow "====> Setting public key in {{ node.name }}..."
scp -F vagrant.ssh.config tmp_authorized_keys vagrant@{{ node.name }}:/home/{{ primary_user.name }}/.
vagrant ssh {{ node.name }} -c "mkdir -p /home/{{ primary_user.name }}/.ssh && cat /home/{{ primary_user.name }}/tmp_authorized_keys >> /home/{{ primary_user.name }}/.ssh/authorized_keys && sudo chmod 0644 /home/{{ primary_user.name }}/.ssh/authorized_keys && rm -f /home/{{ primary_user.name }}/tmp_authorized_keys"
{% endfor %}

echo_yellow "====> Setting private key..."
# This will allow the bootstrap node to easily access the other nodes since the above put in the public key for each node.
scp -F vagrant.ssh.config {{ primary_user.key.path }}/{{ primary_user.key.private }} vagrant@{{ bootstrap.name }}:/home/vagrant/.ssh/{{ primary_user.key.private }}
vagrant ssh {{ bootstrap.name }} -c "sudo chmod 0600 /home/{{ primary_user.name }}/.ssh/{{ primary_user.key.private }}"

# No longer need tmp public key
echo_yellow "====> Cleaning up..."
rm -f tmp_authorized_keys

echo
echo_green "==================================================================================="
echo_green "*NB: Do the following before trying to access Cepheus' Vagrant Cluster:"
echo_light_red "  cd $REPO_ROOT/bootstrap/vagrant"
echo_green "All Vagrant commands must originate from that directory."
echo
echo_green "You can access Vagrant using the following:"

{% for item in inventory.nodes %}
    echo_yellow "  vagrant ssh {{ item.name }}"
{% endfor %}

echo
echo_green "====> Finished Ceph Vagrant build with Cepheus in $SECONDS seconds - Complete"
echo_green "==================================================================================="
echo
