#!/bin/bash
#
# Author: Chris Jones <chris.jones@lambdastack.io>
# Copyright 2017, LambdaStack
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# NB: PXE_BOOT would normally do all of this.
# NB: The initial bootstrap process: Chef Server and Chef Clients are installed and setup along with everything else.
# NB: Setup sudoers, users, dependencies needed for Chef and Ansible etc...

# NB: set -e is not set here since '$?' is being checked and taking action.

# export REPO_ROOT=$(git rev-parse --show-toplevel)

# This sould only get called once!
# This file will get created here and then 'bootstrap_ceph.sh' will remove it. Until it is removed certain scripts
# will NOT run.
##############
# IMPORTANT
echo "{{ build.ceph.bootstrap_gate_message }}" > /home/{{ primary_user.name }}/{{ build.ceph.bootstrap_gate_file }}
sudo chown {{ primary_user.name }}:{{ primary_user.name }} /home/{{ primary_user.name }}/{{ build.ceph.bootstrap_gate_file }}
##############

REPO_ROOT=$1
BUILD_LOCATION=$2
BUILD_DATA_CENTER=$3

source $REPO_ROOT/bootstrap/common/base_colors.sh

if [[ -z $REPO_ROOT ]]; then
    echo_red "====> MUST specify the REPO_ROOT variable <===="
    exit 1
fi

if [[ -z $BUILD_LOCATION ]]; then
    echo_red "====> MUST specify the BUILD_LOCATION variable <===="
    exit 1
fi

if [[ -z $BUILD_DATA_CENTER ]]; then
    echo_red "====> MUST specify the BUILD_DATA_CENTER variable <===="
    exit 1
fi

{% if os.type != "ubuntu" %}
for pack in kernel-devel gcc make perl bzip2 epel-release rsync vim git wget curl python2-pip python-jinja2 PyYAML ansible ipmitool yum-utils createrepo ntp tmux; do
    found=$(rpm -qa | grep ^$pack- | head -1)
    echo_yellow "====> Package $pack - found: $found"
    if [[ -z $found ]]; then
        echo_green "====> Installing $pack"
        yum install -y $pack
    fi
done
{%- endif %}

# If ansible is installed then move it's hosts file.
if [[ -d /etc/ansible ]]; then
    sudo cp $REPO_ROOT/bootstrap/common/hosts_ansible /etc/ansible/hosts
fi

# Set hosts file for cluster init
if [[ -f $REPO_ROOT/bootstrap/common/hosts ]]; then
    sudo cp $REPO_ROOT/bootstrap/common/hosts /etc/hosts
fi

{%- for user in users %}

echo_yellow "====> Checking user {{ user.name }}"
found=$(grep {{ user.name }} /etc/passwd)
if [[ $? -ne 0 ]]; then
    echo_green "====> Adding user $user"
    useradd {{ user.name }} -g {{ user.group }} -p {{ user.passwd }}
fi

{%- endfor %}

echo_yellow "====> Checking group for {{ primary_user.name }}"
found=$(grep "{{ primary_user.name }}:" /etc/group)
if [[ $? -ne 0 ]]; then
    echo_green "====> Adding group for {{ primary_user.name }}"
    groupadd {{ primary_user.name }}
fi

echo_yellow "====> Checking user group {{ primary_user.name }}"
found=$(grep wheel /etc/group | grep {{ primary_user.name }})
if [[ $? -ne 0 ]]; then
    echo_green "====> Modifying user {{ primary_user.name }}"
    usermod -a -G wheel,{{ primary_user.name }} {{ primary_user.name }}
fi

echo_yellow "====> Checking directory /home/{{ primary_user.name }}/.ssh"
if [[ ! -d /home/{{ primary_user.name }}/.ssh ]]; then
    echo_green "====> Creating directory /home/{{ primary_user.name }}/.ssh"
    mkdir --mode=0700 -p /home/{{ primary_user.name }}/.ssh
fi

{% if primary_user.key.enable %}
# Checking for private key from environment.yaml file...
# NB: May want to revisit key management later...

echo_light_purple "====> Checking {{ primary_user.key.path }}/{{ primary_user.key.private }}"
if [[ ! -f {{ primary_user.key.path }}/{{ primary_user.key.private }} ]]; then
    echo_green "====> Creating {{ primary_user.key.path }}/{{ primary_user.key.private }}"
    ssh-keygen -b 2048 -t rsa -q -f {{ primary_user.key.path }}/{{ primary_user.key.private }} -C "{{ primary_user.comment }}" -P "{{ primary_user.key.passphrase }}"
    chmod 0600 {{ primary_user.key.path }}/{{ primary_user.key.private }}*
    chown -R {{ primary_user.name }}:{{ primary_user.group }} {{ primary_user.key.path }}/{{ primary_user.key.private }}*
fi

echo_light_purple "====> Checking /home/{{ primary_user.name }}/.ssh/authorized_keys"
if [[ ! -f /home/{{ primary_user.name }}/.ssh/authorized_keys ]]; then
    echo_green "====> Creating /home/{{ primary_user.name }}/.ssh/authorized_keys"
{% if primary_user.key.public.startswith('ssh-rsa') %}
    echo "{{ primary_user.key.public }}" >> /home/{{ primary_user.name }}/.ssh/authorized_keys
{% else %}
    echo {{ primary_user.key.path }}/{{ primary_user.key.public }} >> /home/{{ primary_user.name }}/.ssh/authorized_keys
{% endif %}
fi

echo_light_purple "====> Checking /home/{{ primary_user.name }}/.ssh/id_rsa"
if [[ ! -f /home/{{ primary_user.name }}/.ssh/id_rsa ]]; then
    echo_green "====> Creating /home/{{ primary_user.name }}/.ssh/id_rsa"

    cp {{ primary_user.key.path }}/{{ primary_user.private_key }} /home/{{ primary_user.name }}/.ssh/id_rsa

    chmod 0600 /home/{{ primary_user.name }}/.ssh/authorized_keys
    chmod 0600 /home/{{ primary_user.name }}/.ssh/id_rsa
    chown -R {{ primary_user.name }}:{{ primary_user.group }} /home/{{ primary_user.name }}/.ssh
fi
{% endif %}

# Setup sudoer
echo_yellow "====> Checking sudoer for {{ primary_user.name }}"
if sudo bash -c '[[ ! -f "/etc/sudoers.d/{{ primary_user.name }}" ]]'; then
    echo_green "====> Updating sudoer for {{ primary_user.name }}"

    sudo echo "%{{ primary_user.name }} ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers.d/{{ primary_user.name }}
    sudo sed -i "s/^[^#].*requiretty/#Defaults requiretty/" /etc/sudoers
    sudo echo "{{ primary_user.name }} ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers.d/{{ primary_user.name }}
fi

{%- if subscription.enable %}
{{ subscription.commands }}
# Go ahead and create a script in /tmp if the network has issues during the process.
cat <<EOM >/tmp/rhelsub.sh
# service network restart
{{ subscription.commands }}
yum update -y
EOM
chmod +x /tmp/rhelsub.sh
{%- endif %}

# May need to do something with NICs here since some require a little extra love before they are happy!

echo
echo_green "====> bootstrap_init.sh - Complete <===="
echo
