#!/bin/bash
#
# Copyright 2017, LambdaStack
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# NOTE: AUTOGENERATED FILE. Only modify template version.

# Exit immediately if anything goes wrong!
set -eu

# Check for required environment variables and exit if not all are set.
FAILED_ENVVAR_CHECK=0
REQUIRED_VARS=( BOOTSTRAP_CACHE_DIR )
for ENVVAR in ${REQUIRED_VARS[@]}; do
  if [[ -z ${!ENVVAR} ]]; then
    echo "===> Environment variable $ENVVAR must be set!" >&2
    FAILED_ENVVAR_CHECK=1
  fi
done
if [[ $FAILED_ENVVAR_CHECK != 0 ]]; then exit 1; fi

# Create directory for download cache.
CACHE_ISO={{ build.cache.iso }}
CACHE_RPM={{ build.cache.rpm }}
CACHE_DEB={{ build.cache.deb }}
CACHE_PYTHON={{ build.cache.python }}
CACHE_LOADER={{ build.cache.loader }}
CACHE_COOKBOOK={{ build.cache.cookbook }}
CACHE_GEM={{ build.cache.gem }}
mkdir -p {{ build.cache.base }}/{{ build.cache.cobbler }}/{$CACHE_ISO,$CACHE_LOADER}
mkdir -p {{ build.cache.base }}/{$CACHE_PYTHON,$CACHE_RPM,$CACHE_DEB,$CACHE_COOKBOOK,$CACHE_GEM}

# download_file wraps the usual behavior of curling a remote URL to a local file
# NOTE: PROXY - Make sure your http_proxy and https_proxy envrionment variables are set correctly if behind a proxy.
download_file() {
  FILE=$1
  URL=$2

  if [[ ! -f {{ build.cache.base }}/$FILE && ! -f {{ build.cache.base }}/${FILE}_downloaded ]]; then
    echo $FILE
    echo $URL

    rm -f {{ build.cache.base }}/$FILE
    curl -L --progress-bar -o {{ build.cache.base }}/$FILE $URL
    touch {{ build.cache.base }}/${FILE}_downloaded
  fi
}

# NOTE: PROXY - Make sure your ftp_proxy envrionment variable is set correctly if behind a proxy.
ftp_file() {
  FILE=$1
  URL=$2

  if [[ ! -f {{ build.cache.base }}/$FILE && ! -f {{ build.cache.base }}/${FILE}_downloaded ]]; then
    echo $FILE
    echo $URL

    rm -f {{ build.cache.base }}/$FILE
    wget $URL -O {{ build.cache.base }}/$FILE
    touch {{ build.cache.base }}/${FILE}_downloaded
  fi
}

git_clone_or_update() {
  local NAME=$1
  local URL=$2

  echo "===> Git clone or update..."
  if [[ ! -f {{ build.cache.base }}/${NAME}_downloaded ]]; then
    if [[ ! -d {{ build.cache.base }}/$NAME ]]; then
      git clone $URL {{ build.cache.base }}/$NAME || true
    else
      ( cd {{ build.cache.base }}/$NAME && git pull --ff-only $URL )
    fi
    touch {{ build.cache.base }}/${NAME}_downloaded
  fi
}

# Obtain an RHEL 7.2 image to be used for PXE booting in production.
echo "===> Downloading ISO..."
if [[ ! -z $COBBLER_BOOTSTRAP_ISO ]]; then
  if [[ $COBBLER_DOWNLOAD_ISO -eq 1 ]]; then
    # NOTE: the +e is because the hardware build. We can change it later...
    set +e
    download_file {{ build.cache.cobbler }}/{{ build.cache.iso }}/$COBBLER_BOOTSTRAP_ISO $COBBLER_REMOTE_URL_ISO
    set -e
  fi
fi

if [[ ! -z $COBBLER_BOOTSTRAP_ISO ]]; then
  download_file {{ build.cache.cobbler }}/{{ build.cache.loader }}/pxelinux.0 http://cobbler.github.io/loaders/pxelinux.0-3.86
  download_file {{ build.cache.cobbler }}/{{ build.cache.loader }}/menu.c32 http://cobbler.github.io/loaders/menu.c32-3.86
  download_file {{ build.cache.cobbler }}/{{ build.cache.loader }}/grub-x86.efi http://cobbler.github.io/loaders/grub-0.97-x86.efi
  download_file {{ build.cache.cobbler }}/{{ build.cache.loader }}/grub-x86_64.efi http://cobbler.github.io/loaders/grub-0.97-x86_64.efi
fi

echo "===> Downloading Chef..."
download_file /{{ build.cache.rpm }}/{{ build.chef.client.rhel.package }} https://packages.chef.io/files/stable/chef/{{ build.chef.client.rhel.version }}/el/7/{{ build.chef.client.rhel.package }}
download_file /{{ build.cache.rpm }}/{{ build.chef.server.rhel.package }} https://packages.chef.io/files/stable/chef-server/{{ build.chef.server.rhel.version }}/el/7/{{ build.chef.server.rhel.package }}

# BIRD is a little different
echo "===> Downloading Bird..."
ftp_file /{{ build.cache.rpm }}/{{ build.adc.bgp.bird.rhel }} ftp://bird.network.cz/pub/bird/redhat/{{ build.adc.bgp.bird.rhel }}

# Most important cookbook
# If set then it will not download but remove from cache and use the development version that should be set in the cepheus/cookbooks directory.
if [[ $CHEF_CEPHEUS_DEBUG -eq 0 ]]; then
  echo "===> Downloading ceph-chef..."
  download_file {{ build.cache.cookbook }}/ceph-chef-{{ build.ceph_chef.version }}.tar.gz http://cookbooks.opscode.com/api/v1/cookbooks/ceph-chef/versions/{{ build.ceph_chef.version }}/download
else
  # Remove it so it's not used.
  echo "===> Removing ceph-chef cache and using *debug* version of Ceph-Chef..."
  rm -f {{ build.cache.base }}/{{ build.cache.cookbook }}/ceph-chef-*
fi

if [[ $CEPH_DEV_MODE -ne 0 ]]; then
  echo "===> Cloning Ceph..."
  git_clone_or_update github/ceph https://github.com/ceph/ceph.git
fi

# Python
{%- for item in build.python %}
download_file /python/{{ item.name }}-{{ item.verion }}.tar.gz http://pyyaml.org/download/pyyaml/{{ item.name }}-{{ item.version }}.tar.gz
{%- endfor %}

# Cookbooks
{%- for item in build.cookbooks %}
download_file {{ build.cache.cookbook }}/{{ item.name }}-{{ item.version }}.tar.gz http://cookbooks.opscode.com/api/v1/cookbooks/{{ item.name }}/versions/{{ item.version }}/download
{%- endfor %}

# Gems
# REQUIRED for ceph-chef cookbook - must be installed before doing 'sudo chef-client' on any node
{%- for item in build.ceph_chef.gems %}
download_file {{ build.cache.gem }}/{{ item.name }}-{{ item.version }}.gem https://rubygems.org/downloads/{{ item.name }}-{{ item.version }}.gem
{%- endfor %}

# Pull needed gems for fpm
GEMS=( {{ build.gems|join(' ') }} )
# mkdir -p {{ build.cache.base }}/gems
for GEM in ${GEMS[@]}; do
  download_file {{ build.cache.gem }}/$GEM.gem https://rubygems.global.ssl.fastly.net/gems/$GEM.gem
done

# Pull knife-acl gem. This is ONLY needed if using data bags where the data bag is created with a recipe!
download_file {{ build.cache.gem }}/knife-acl-{{ build.chef.knife_acl_version }}.gem https://rubygems.global.ssl.fastly.net/gems/knife-acl-{{ build.chef.knife_acl_version }}.gem
