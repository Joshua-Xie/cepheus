#!/bin/bash
#
# Author: Chris Jones <chris.jones@lambdastack.io>
# Copyright 2017, LambdaStack
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# This script bootstraps Chef on the bootstrap node.
# NOTE: This file gets generated in the data center specific folder like dc1 or dc2. That's where it should be launched

TMP_REPO_ROOT=$1
REPO_ROOT=${TMP_REPO_ROOT:-"{{ cache.repo }}"}
REPO_ROOT_FILES={{ cache.base }}
KNIFE=/opt/opscode/embedded/bin/knife

source $REPO_ROOT/bootstrap/common/base_colors.sh

if [[ -z $TMP_REPO_ROOT ]]; then
    echo_red "====> MUST specify the TMP_REPO_ROOT variable"
    exit 1
fi

# Check for running Chef Server. Could do update of server here.
sudo which chef-server-ctl 2>/dev/null
if [[ $? -eq 0 ]]; then
    # Now check for everything running to make sure
    sudo chef-server-ctl status
    if [[ $? -eq 0 ]]; then
        echo_red "====> Found running Chef Server so no bootstrapping..."
        echo
        # Remove the cepheus-build repo
        rm -rf $HOME/{{ build.cepheus }}
        exit 0
    fi
fi

{% if os.type == "rhel" %}
# To make this less steps go ahead do a yum update first
echo_red "====> Checking subscription-manager..."

status=$(sudo subscription-manager status | awk -F":" '{print $2}' | grep Current)
if [[ -z $status ]]; then
  sudo /tmp/rhelsub.sh
fi
{% endif %}

set -e

# base.sh sets REPO_ROOT...
source $TMP_REPO_ROOT/bootstrap/common/base.sh

# Check to see if Chef Server is installed
set +e
echo_yellow "====> Checking for installed Chef Server..."

{% if os.type != "ubuntu" %}
chef_server=$(rpm -qa | grep chef-server)
{% else %}
chef-server="$(dpkg-query -l 'chef-server*')"
{% endif %}
set -e

# NOTE: Because the operations key *may* contain a security phrase, we will temporarily move it so that Chef uses the
# password instead. After the run the key will be moved back.
if [[ -f $HOME/.ssh/id_rsa ]]; then
    mv $HOME/.ssh/id_rsa $HOME/.ssh/id_rsa.tmp
fi

#### NOTE: You can check to see if user 'admin' exists and if org 'cepheus' exists but this is usually only called once.
# If you *have* to run this again then simply just comment one or both of these lines out before running.
if [[ -z $chef_server ]]; then
    echo_green "====> Creating Chef Server..."

    if sudo bash -c '[[ ! -d "/etc/opscode" ]]'; then
        sudo rpm -Uvh $(find $REPO_ROOT_FILES/ -name chef-server\*rpm -not -name \*downloaded | tail -1)
    fi

    # Can't use color here since it pipes to file.
    echo "nginx['non_ssl_port'] = 4000" | sudo tee /etc/opscode/chef-server.rb
    echo "nginx['enable_non_ssl'] = true" | sudo tee --append /etc/opscode/chef-server.rb
    echo

    sudo chef-server-ctl reconfigure

    # set +e
    # sudo chef-server-ctl user-show {{ chef.admin.user }} 2>/dev/null
    # set -e
    # if [[ $? -ne 0 ]]; then
        sudo chef-server-ctl user-create {{ chef.admin.user }} {{ chef.admin.user }} {{ chef.admin.user }} {{ chef.admin.email }} welcome --filename /etc/opscode/{{ chef.admin.pem }}
    # fi
    # set +e
    # sudo chef-server-ctl org-show {{ chef.org }} 2>/dev/null
    # set -e
    # if [[ $? -ne 0 ]]; then
        sudo chef-server-ctl org-create {{ chef.org }} "{{ chef.name }}" --association {{ chef.admin.user }} # {# --filename /etc/opscode/{{ chef.validator }}.pem #}
    # fi
fi
# NB: May want to think of updating Chef Server here...
####

echo_yellow "====> Creating $HOME/.chef environment..."
mkdir -p $HOME/.chef
echo -e "knife[:bootstrap_install_command] = 'sudo rpm -Uvh $REPO_ROOT_FILES/{{ cache.packages }}/{{ chef_repo.client.package }}'\nchef_server_url 'https://{{ bootstrap.name }}.{{ domain }}/organizations/{{ chef.org }}'\nnode_name 'admin'\nclient_key '/etc/opscode/admin.pem'\nknife['editor'] = 'vim'\ncookbook_path [ \"/home/{{ primary_user.name }}/cepheus/cookbooks\" ]" > $HOME/.chef/knife.rb
$KNIFE ssl fetch

echo_yellow "====> Bootstrapping Chef Server for {{ primary_user.name }}"
$KNIFE bootstrap {{ bootstrap.ip }} -x {{ primary_user.name }} -N {{ bootstrap.name }} -P {{ primary_user.name }} --sudo --yes

# Puts everything where it needs to be...
# Cepheus-build should have put together the proper layering so that everything here is assumed to be correct.
echo_yellow "====> Create working Cepheus home directory and files..."
if [[ -d /home/{{ primary_user.name }}/cepheus ]]; then
    # Force a cleanup...
    rm -rf /home/{{ primary_user.name }}/cepheus
fi
mkdir -p /home/{{ primary_user.name }}/cepheus
cp -rp $TMP_REPO_ROOT/. /home/{{ primary_user.name }}/cepheus

echo_yellow "====> Move files to {{ cache.repo }}..."
if [[ -d {{ cache.repo }} ]]; then
    sudo rm -rf {{ cache.repo }}
fi
sudo mkdir -p {{ cache.repo }}
sudo cp -rp $TMP_REPO_ROOT/. {{ cache.repo }}
sudo chown -R {{ primary_user.name }}:{{ primary_user.name }} {{ cache.repo }}

# Remove the cepheus-build repo
if [[ -d $HOME/{{ build.cepheus }} ]]; then
    rm -rf $HOME/{{ build.cepheus }}
fi

# Add the dependency cookbooks from the file cache
echo_yellow "====> Checking on dependency for cookbooks..."
sudo cp $REPO_ROOT_FILES/cookbooks/*.tar.gz $HOME/cepheus/cookbooks
cd $HOME/cepheus/cookbooks && ls -1 *.tar.gz | xargs -I% sudo tar xvzf %
cd $HOME/cepheus/cookbooks && sudo rm -f *.tar.gz

{%- if pxe_boot.enable %}
# NOTE: *HAVE* to load the files into files/ before cookbook upload
if [[ -d $REPO_ROOT_FILES/cobbler ]]; then
    sudo cp $REPO_ROOT_FILES/cobbler/loaders/* $HOME/cepheus/cookbooks/cepheus/files/loaders
fi
{% endif %}

sudo chown -R {{ primary_user.name }}:{{ primary_user.name }} $HOME/cepheus

if [[ -d /tmp/cepheus ]]; then
    rm -rf /tmp/cepheus
fi

if [[ -f /home/{{ primary_user.name }}/.ssh/id_rsa.tmp ]]; then
    mv /home/{{ primary_user.name }}/.ssh/id_rsa.tmp /home/{{ primary_user.name }}/.ssh/id_rsa
fi

# NB: TODO: Need to move required chef data and bootstrap all of the other nodes IF NOT pxe_boot enabled. This
# must assume that the ssh-key represented in the yaml data files are already in place on each node so ansible can
# move the data and bootstrap the chef-client on each of the nodes.

echo_green "====> bootstrap_chef_server.sh - Complete <===="
echo
